1)Le commit create in una repository locale, vengono sincronizzate
automaticamente con la repository online collegata?

-Falso

2)Qual è il nuovo nome standard del branch principale utilizzato come
convenzione in GIT?

- Main

3)Come descriveresti il workflow dei comandi di GIT?

- git add --> git commit --> git push

4)Qual è il comando da utilizzare per vedere l’elenco di tutte le commit del
branch in cui ci si trova e i loro hashcode?

 - git log

5)Scrivi il comando per effettuare il rollback ad una commit precedente

- git reset --hard(codice hash della commit precedente)

6)Scrivi due motivazioni per giustificare l’utilizzo di GIT
- Si utilizza GIT per ottimizzare il lavoro in caso si dovesse lavorare in un team ed
 è ottimo per la gestione di file.

7)Spiega la differenza tra git clone e git pull.
- git clone serve per copiare una repository già creata in locale.
 Perciò non servirà creare una nuova repository e nemmeno collegarla all'online(perché già fatto da git hub), 
 quindi in caso di modifica si modificherà anche quella clonata.

- Usa git pull per aggiornare un repository locale tramite la repository online corrispondente. 
(mentre lavori localmente su main, esegui git pull per aggiornare la copia locale di main e aggiornare gli altri branch di tracciamento remoto. )

Quindi la differenza sostanziale tra clone e pull è che clone permette di clonare la repository e collegarla direttamente all'origine invece pull permette di aggiornare delle modifiche o prendere un file dalla repository online e modificarlo

8)Descrivi cosa sono i rami di sviluppo in GIT (branches). Spiega inoltre come si
creano, come ci si sposta in un ramo esistente, come si uniscono le modifiche
di un ramo in un altro e come vedere il ramo corrente, attenendoti ai comandi
visti in classe.

- I rami di sviluppo detti anche branches sono delle diramazioni del ramo principale(main) dove noi possiamo effettuare delle modifiche ed in caso di errore e problemi vari non andiamo a danneggiare il ramo principale, per creare un nuovo branch si utilizza il
comando git checkout -b (nome del branch) e le modifiche fatte su un branch secondario non sono visibili dal branch principale perciò si utilizza il comando git merge (nome branch da unire) in modo di unire il branch secondario al main in modo da
rendere visibili le sue modifiche anche lì. Per spostarci da un ramo all'altro si usa cil comandi git checkout (nome del branch dove vogliamo andare) e se volessimo vedere il branch in cui siamosi utilizza il comando git status.

9)Spiega di cosa si occupa l’ingegneria del software
- L' ingegneria dei software informatici si occupa dei processi produttivi e delle metodologie di sviluppo finalizzate alla realizzazione di sistemi software.
 Si propone una serie di obiettivi legati all'evoluzione dello sviluppo del software sia da un punto di vista tecnologico che metodologico.
Si occupa della creazione di software per clienti privati/aziende e si lavora in gruppo comandato dal project master.
Il suo compito è quello di stabilire le tempistiche per il completamento di questo progetto, i problemi, e segnarsi eventuali eventi che si potrebbero verificare in modo da ricordarsi cosa fare in caso si dovesse verificare di nuovo quel problema.

10)Spiega cosa è il ciclo di vita del software e le fasi in cui si suddivide

Il ciclo di vita di un software si divide in: ANALI,PROGETTAZIONE,REALIZZAZZIONE,AVVIO IN PRODUZIONE,MANUTENZIONE

ANALISI:
In questa fase il project manager(scelto dal team) deve valutare la fattibilità del progetto proposto, i costi e gli obbiettivi.
e decidere se svolgere il progetto o rinunciarci perché non porterebbe nessun profitto; il project manager si basa su un triangolo di fattori composto da obbiettivi,costi e fattibilità
loro 3 insieme stabiliscono la qualità del progetto.

PROGETTAZIONE:
Se il progetto passa il controllo(ANALISI) bisognadecidere la tabella di marcia che bisogna seguire per il completamento del progetto
 e stabilire le varie fasi per la sua creazione, i compiti che ogni componente del team deve svolgere e il tempo nel quale deve svolgerlo, segnalare eventuali problematiche.

REALIZZAZIONE:
Dove il progetto viene consegnato a dei programmatori, i quali tramite il linguaggio più opportuno
realizzeranno il progetto ed eseguiranno i vari test per poi consegnarlo all'utente

AVVIO IN PRODUZIONE:
Dove il programma viene consegnato all'utente e lo utilizza quanto vuole e quì si entra nella fase di

MANUTENZIONE:
questa fase dura per tutto il tempo nel quale il software viene utilizzato perché si potrebbero verificare problemi o imprevisti causati dalla mancato test di verifica,
ci sono 3 tipi di manutenzione:
Correttiva, questo tipo di manutenzione corregge un errore causatosi dall'utente o di problema non abbastanza testato
Evolutiva, serve per aggiungere al software nuove funzionalità
Adattiva,mutazioni in in base alle necessità ai protocolli o necessità dell'utente

 

